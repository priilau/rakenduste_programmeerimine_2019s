openapi: '3.0.0'
info:
  title: Saastapood
  description: "rp2019s ajal loodud e-pood"
  version: "1.0.0"
servers: 
  - url: localhost:3000/api/v1
security: 
  - bearerAuth: []
paths:
  /items/{itemId}:
    get:
      operationId: getItem
      summary: Returns an item object
      parameters:
        - $ref: "#/components/parameters/itemIdParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        403:
          description: Forbidden
        500:
          description: err
  /users/{userId}:
    get:
      operationId: getUser
      summary: Returns an user object
      security: 
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        403:
          description: Forbidden
        500:
          description: err
  /users/{userId}/cart/{itemId}:
    put: 
      operationId: addItemToCart
      summary: Adds item to cart
      security: 
        - bearerAuth: []
      parameters: 
        - $ref: "#/components/parameters/userIdParam"
        - $ref: "#/components/parameters/itemIdParam"
      responses:
        200:
          description: OK
        403:
          description: Forbidden
        500:
          description: err
    delete: 
      operationId: removeItemFromCart
      summary: Removes item from cart
      security: 
        - bearerAuth: []
      parameters: 
        - $ref: "#/components/parameters/userIdParam"
        - $ref: "#/components/parameters/itemIdParam"
      responses:
        200:
          description: OK
        403:
          description: Forbidden
        500:
          description: err
  /login:
    post:
      operationId: login
      summary: User logs in
      description: ""
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                      createdAt:
                        type: string
                      _id:
                        type: string
        422:
          description: Bad email or password
        401:
          description: Unauthorized
  
  /signup:
    post:
      operationId: signup
      summary: User signs up
      description: ""
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                confirmPassword:
                  type: string
      responses:
        200:
          description: OK.
        422:
          description: bad email or password
        401:
          description: unauthorized
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        createdAt:
          type: string
        cart:
          type: array
          items:
            type: string
        email:
          type: string
    Item:
      type: object
      properties:
        _id:
          type: string
        createdAt:
          type: string
        price:
          type: string
        title:
          type: string
  parameters:
    userIdParam:
      in: path
      name: userId
      schema: 
        type: string
      required: true
    itemIdParam:
      in: path
      name: itemId
      schema: 
        type: string
      required: true